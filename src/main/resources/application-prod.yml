spring:

  # ControllerHandler 전략 선택
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  # 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true

  # JPA 설정
  jpa:
    open-in-view: false
    generate-ddl: true
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
        format_sql: true

  # Security OAuth
  security:
    oauth2.client:
      registration:
        google:
          clientId: ${GOOGLE_CLIENT_ID}
          clientSecret: ${GOOGLE_CLIENT_SECRET}
          redirect-uri: ${HOST_DNS}/login/oauth2/code/google
          scope:
            - email
            - profile
        facebook:
          clientId: '{페이스북 client-id}'
          clientSecret: '{페이스북 client-secret}'
          scope:
            - email
            - public_profile
        naver:
          clientId: ${NAVER_CLIENT_ID}
          clientSecret: ${NAVER_CLIENT_SECRET}
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirect-uri: ${HOST_DNS}/login/oauth2/code/naver
          scope:
            - nickname
            - email
            - profile_image
          clientName: Naver
        kakao:
          clientId: '{카카오 client-id}'
          clientSecret: '{카카오 client-secret}'
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - profile_nickname
            - profile_image
            - account_email
          clientName: Kakao

      # Provider 설정
      provider:
        naver:
          authorizationUri: https://nid.naver.com/oauth2.0/authorize
          tokenUri: https://nid.naver.com/oauth2.0/token
          userInfoUri: https://openapi.naver.com/v1/nid/me
          userNameAttribute: response
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# cors 설정
cors:
  allowed-origins: ${ORIGINS}
  allowed-methods: GET,POST,PUT,PATCH,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# jwt secret key 설정
jwt.secret: ${JWT_SECRET}

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: ${APP_AUTH_TOKEN_SECRET}
    tokenExpiry: ${APP_AUTH_ACCESS_TOKEN_EXPIRY}
    refreshTokenExpiry: ${APP_AUTH_REFRESH_TOKEN_EXPIRY}
  oauth2:
    authorizedRedirectUris: ${ORIGINS}

# AWS
cloud:
  aws:
    s3:
      bucket: wbj-media
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      access-key: ${CLOUD_CREDENTIALS_ACCESS_KEY}
      secret-key: ${CLOUD_CREDENTIALS_SECRET_KEY}

logging:
  level:
    com:
      amazonaws:
        util:
          EC2MetadataUtils: error

# Server URL
server:
  url: ${HOST_DNS}

# Firebase
logo:
  url: https://wbj-media.s3.ap-northeast-2.amazonaws.com/assets/asyncrum-logo-small.png